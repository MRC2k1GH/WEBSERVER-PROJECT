version: '3.8'

volumes:
  db_data_master:
  db_data_slave:
  esdata:
  esdata2:
  esdata3:
  grafana-data:
  metricbeat-data01:
  filebeat:
  wp-content:
  logstash:

services:
  
  # Database Master
  db_master:
    image: mysql:latest
    container_name: db_master
    volumes:
      - db_data_master:/var/lib/mysql
      - ./master.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql_logs:/var/log/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: REPLACEME
      MYSQL_PASSWORD: REPLACEME
    ports:
    - '3307:3306'
    networks:
      - wpsite

  
    #Database Slave
  db-slave:
    image: mysql:latest
    container_name: db-slave
    volumes:
     - db_data_slave:/var/lib/mysql
     - ./slave.cnf:/etc/mysql/conf.d/my.cnf
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: REPLACEME
      MYSQL_DATABASE: wordpress
      MYSQL_MASTER_HOST: db_master
      MYSQL_MASTER_ROOT_PASSWORD: REPLACEME
    ports:
    - '3308:3306'
    networks:
      - wpsite

  # Wordpress Main
  wordpress_1:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    container_name: wordpress_1
    ports:
      - '8081:80'
    restart: always
    volumes:
      - wp-content:/var/www/html/wp-content
      - "./.htaccess:/var/www/html/.htaccess"
      - ./apache_logs:/var/log/apache2
    environment:
      WORDPRESS_DB_HOST: haproxy
      WORDPRESS_DB_USER: REPLACEME
      WORDPRESS_DB_PASSWORD: REPLACEME
      WORDPRESS_DATABASE: wordpress
    networks:
      - wpsite

# Wordpress backup 1
  wordpress_2:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    container_name: wordpress_2
    ports:
      - '8082:80'
    restart: always
    volumes:
      - wp-content:/var/www/html/wp-content
      - "./.htaccess:/var/www/html/.htaccess"
      - ./apache_logs:/var/log/apache2
    environment:
      WORDPRESS_DB_HOST: haproxy
      WORDPRESS_DB_USER: REPLACEME
      WORDPRESS_DB_PASSWORD: REPLACEME
      WORDPRESS_DATABASE: wordpress
    networks:
      - wpsite


# Wordpress backup 2
  wordpress_3:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    container_name: wordpress_3
    ports:
      - '8083:80'
    restart: always
    volumes:
      - wp-content:/var/www/html/wp-content
      - "./.htaccess:/var/www/html/.htaccess"
      - ./apache_logs:/var/log/apache2
    environment:
      WORDPRESS_DB_HOST: haproxy
      WORDPRESS_DB_USER: REPLACEME
      WORDPRESS_DB_PASSWORD: REPLACEME
      WORDPRESS_DATABASE: wordpress
    networks:
      - wpsite

# Database Load Balancer
  haproxy:
    image: haproxy:latest
    container_name: haproxy
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "3306:3306"
      - "9999:9999"
      - "14567:14567"
      - "8405:8405"
    networks:
      - wpsite

# Webservers Load Balancer
  nginx:
    image: mailer21/nginx-sticky-vts
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx_logs:/var/log/nginx
    ports:
      - "80:80"
    networks:
      - wpsite

# PHPMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - db_master
    environment:
      PMA_HOST: db_master
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - 8085:80
    networks:
      - wpsite

  # Elasticsearch 1
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - cluster.name=es_cluster
      - node.name=elasticsearch
      - "ES_JAVA_OPTS=-Xmx1024m -Xms1024m"
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.transport.ssl.keystore.password=elastic
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.http.ssl.keystore.password=elastic
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - ELASTIC_PASSWORD=pass
      - cluster.initial_master_nodes=elasticsearch,elasticsearch2,elasticsearch3
      - discovery.seed_hosts=elasticsearch2,elasticsearch3
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - ./elasticsearch-certs:/usr/share/elasticsearch/config/certs
    networks:
      - wpsite

# Elasticsearch 2
  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch2
    environment:
      - cluster.name=es_cluster
      - node.name=elasticsearch2
      - "ES_JAVA_OPTS=-Xmx1024m -Xms1024m"
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.transport.ssl.keystore.password=elastic
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.http.ssl.keystore.password=elastic
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - ELASTIC_PASSWORD=pass
      - discovery.seed_hosts=elasticsearch,elasticsearch3
      - cluster.initial_master_nodes=elasticsearch,elasticsearch2,elasticsearch3
    volumes:
      - esdata2:/usr/share/elasticsearch/data
      - ./elasticsearch-certs:/usr/share/elasticsearch/config/certs
    networks:
      - wpsite

# Elasticsearch 3
  elasticsearch3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch3
    environment:
      - cluster.name=es_cluster
      - node.name=elasticsearch3
      - "ES_JAVA_OPTS=-Xmx1024m -Xms1024m"
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.transport.ssl.keystore.password=elastic
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
      - xpack.security.http.ssl.keystore.password=elastic
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
      - ELASTIC_PASSWORD=pass
      - discovery.seed_hosts=elasticsearch,elasticsearch2
      - cluster.initial_master_nodes=elasticsearch,elasticsearch2,elasticsearch3
    volumes:
      - esdata3:/usr/share/elasticsearch/data
      - ./elasticsearch-certs:/usr/share/elasticsearch/config/certs
    networks:
      - wpsite

# Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.2
    container_name: logstash
    volumes:
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml
      - logstash:/usr/share/logstash/data
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elasticsearch-certs:/usr/share/logstash/config/certs
    depends_on:
      - elasticsearch
    networks:
      - wpsite

# Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    container_name: kibana
    environment:
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: /usr/share/logstash/config/certs/ca.crt
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
      - elasticsearch2
      - elasticsearch3
    volumes:
      - ./kibana.yml:/etc/kibana/kibana.yml
      - ./elasticsearch-certs:/usr/share/logstash/config/certs
    networks:
      - wpsite

# Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.2
    container_name: filebeat
    user: root
    volumes:
      - filebeat:/usr/share/filebeat/data
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml"
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
      - /var/log/:/var/log/
      - ./apache_logs:/usr/share/filebeat/apache_logs:ro
      - ./nginx_logs:/usr/share/filebeat/nginx_logs:ro
      - ./mysql_logs:/usr/share/filebeat/mysql_logs:ro
      - ./other_logs:/usr/share/filebeat/other_logs:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      - logstash
    networks:
      - wpsite

# Metricbeat
  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.13.2
    container_name: metricbeat
    command: metricbeat -e -strict.perms=false
    environment:
      - ELASTICSEARCH_HOSTS= '["https://elasticsearch:9200","https://elasticsearch:9201","https://elasticsearch:9202"]'
      - ELASTICSEARCH_USERNAME= elastic
      - ELASTICSEARCH_PASSWORD= pass
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES= /usr/share/metricbeat/config/certs/ca.crt
    user: root
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - metricbeat-data01:/usr/share/metricbeat/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./elasticsearch-certs:/usr/share/metricbeat/config/certs
    networks:
      - wpsite

# Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - wpsite

#Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
    - wpsite
  
#Elasticsearch Exporter to Prometheus
  elasticsearch_exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch_exporter
    command:
     - '--es.uri=https://elastic:pass@elasticsearch:9200'
     - '--es.ssl-skip-verify'
    restart: always
    ports:
    - "9114:9114"
    networks:
      - wpsite

#Apache Exporter 1, 2, 3
  apache_exporter1:
    image: lusotycoon/apache-exporter
    container_name: apache_exporter1
    privileged: true
    ports:
    - "9117:9117"
    restart: unless-stopped
    entrypoint: /bin/apache_exporter  --scrape_uri="http://wordpress_1/server-status"
    networks:
      - wpsite

  apache_exporter2:
    image: lusotycoon/apache-exporter
    container_name: apache_exporter2
    privileged: true
    ports:
    - "9118:9117"
    restart: unless-stopped
    entrypoint: /bin/apache_exporter  --scrape_uri="http://wordpress_2/server-status"
    networks:
      - wpsite

  apache_exporter3:
    image: lusotycoon/apache-exporter
    container_name: apache_exporter3
    privileged: true
    ports:
    - "9119:9117"
    restart: unless-stopped
    entrypoint: /bin/apache_exporter  --scrape_uri="http://wordpress_3/server-status"
    networks:
      - wpsite

#Nginx Exporter
  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    container_name: nginx_exporter
    restart: always
    command:
      - --nginx.scrape-uri=http://nginx/metrics
    ports:
      - "9113:9113"
    networks:
      - wpsite

#MYSQL Exporter
  mysqlexporter:
    image: quay.io/prometheus/mysqld-exporter
    container_name: mysql_exporter
    ports: 
    - "9104:9104"
    command:
     - "--mysqld.username=root:password"
     - "--mysqld.address=db_master:3306"
    networks:
      - wpsite

#Icinga 2
  icinga2:
    image: jordan/icinga2
    restart: on-failure:5
    hostname: icinga2
    env_file:
      - secrets_sql.env
    environment:
      - ICINGA2_FEATURE_GRAPHITE=1
      - ICINGA2_FEATURE_GRAPHITE_HOST=graphite
      - ICINGA2_FEATURE_GRAPHITE_PORT=2003
      - ICINGA2_FEATURE_GRAPHITE_URL=http://graphite
      - DEFAULT_MYSQL_HOST=mysql
    volumes:
      - ./icinga2_docker.conf:/etc/icinga2
      - ./data/icinga/cache:/var/cache/icinga2
      - ./data/icinga/certs:/etc/apache2/ssl
      - ./data/icinga/etc/icinga2:/etc/icinga2
      - ./data/icinga/etc/icingaweb2:/etc/icingaweb2
      - ./data/icinga/lib/icinga:/var/lib/icinga2
      - ./data/icinga/lib/php/sessions:/var/lib/php/sessions
      - ./data/icinga/log/apache2:/var/log/apache2
      - ./data/icinga/log/icinga2:/var/log/icinga2
      - ./data/icinga/log/icingaweb2:/var/log/icingaweb2
      - ./data/icinga/log/mysql:/var/log/mysql
      - ./data/icinga/spool:/var/spool/icinga2
      - ./data/icinga/cron.d/icinga:/etc/cron.d/icinga
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
      - ./docker_checks.sh:/var/lib/nagios/plugins/docker_checks.sh
    ports:
      - "90:80"
      - "5665:5665"
    networks:
      - wpsite

  graphite:
    image: graphiteapp/graphite-statsd:latest
    container_name: graphite
    restart: on-failure:5
    hostname: graphite
    volumes:
      - ./data/graphite/conf:/opt/graphite/conf
      - ./data/graphite/storage:/opt/graphite/storage
      - ./data/graphite/log/graphite:/var/log/graphite
      - ./data/graphite/log/carbon:/var/log/carbon
    networks:
      - wpsite
  
  mysql:
    image: mariadb
    container_name: mysql
    env_file:
      - secrets_sql.env
    volumes:
      - ./data/mysql/data:/var/lib/mysql
    networks:
      - wpsite

#Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - ./uptime-kuma-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
    ports:
      - 3001:3001  
    restart: always
    networks:
      - wpsite

#Cloudflare Tunnel
  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=REPLACEME
    networks:
      - wpsite

networks:
  wpsite: